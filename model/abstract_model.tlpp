#INCLUDE "TOTVS.CH"

namespace asfw.model

Class AbstractModel
    Public Data oError as object

    Public Method New()

    Public Method FromJsonStr(cJsonStr)
    Public Method FromJson(oJson)

    Public Method IsValid()
    Public Method ClassName()

    Public Method GetErrorMessage(cAttribute, xValue, cAnnotation, oAnnotation)
    Public Method DefaultErrorsMessages(cAttribute, xValue, cAnnotation, oAnnotation)
    Public Method ErrorsMessages(cAttribute, xValue, cAnnotation, oAnnotation)

    Public Method ToJson(lOnlyMapper)
    Public Method ToJsonStr(lOnlyMapper)
    Public Method Set(cAttr, xValue)

    Public Method ValidateModel()
    Public Method ValidateCollection()
    Public Method ValidateObjectAttr()

    Private Method InstanceValues(lOnlyMapper)
    Private Method ExtractJsonValue(oJson)

    Protected Method GetPropertyMapper()
    Protected Method LoadCollection(aItens)
EndClass

Method New() Class AbstractModel

    self:oError := AbstractErrorModel():New()

Return(self)

Method LoadCollection(aItens, cItemClass) Class AbstractModel
    Local nItem := 1
    Local oItem := Nil
    Local aRet := {}

    For nItem := 1 To Len(aItens)
        oItem := &(cItemClass + "():New()")
        aAdd(aRet, oItem:FromJson(aItens[nItem]))
    Next
Return(aRet)

Method Set(cAttr, xValue) Class AbstractModel
    Local cCodeBlk := ""

    Private oObj := self

    If u_AsHasMeth(oObj, "Set" + cAttr)
        cCodeBlk := "{ |aValue| oObj:Set" + cAttr + "(aValue) }"
        Eval(&cCodeBlk, xValue)
    Else
        &("oObj:" + cAttr) := xValue
    EndIf

Return(self)

Method FromJsonStr(cJson) Class AbstractModel
    Local oJson := Nil

    If ValType( cJson ) <> "C"
        cJson := ""
    EndIf

    cRet := FwNoAccent(cJson)

    If !FWJsonDeserialize(cJson, @oJson)
        oJson := Nil
    EndIf
Return(self:FromJson(oJson))

Method FromJson(oJson) Class AbstractModel
    Local aData := ClassDataArr(self)
    Local aDataJson := ClassDataArr(oJson, .T.)
    Local nData := 1
    Local nPosProp := 0

    Private oRet := self

    If oJson == Nil
        Return(oJson)
    EndIf

    For nData := 1 To Len(aData)
        nPosProp := aScan(aDataJson,{|x| Upper(AllTrim(x[1])) == Upper(AllTrim(aData[nData, 1]))})
        If  nPosProp == 0
            Loop
        EndIf

        oRet:Set(aData[nData, 1], oJson[aDataJson[nPosProp, 1]])
    Next

Return(oRet)

Method ClassName() Class AbstractModel
    Local aMeth := ClassMethArr(self, .T.)
    Local nPNewMeth := AScan(aMeth, { |aVet| aVet[1] == "NEW" })
    Local cRet := ""

    If nPNewMeth > 0
        cRet := aMeth[nPNewMeth][3]
    EndIF
Return(cRet)

Method IsValid() Class AbstractModel
Return(self:ValidateModel())

Method ValidateCollection() Class AbstractModel
    Local lRet := .T.
    Local aAttr := Reflection.getAttributesByAnnotation(self,"ModelValidationCollection")
    Local nAttr := 1
    Local aItens := {}
    Local nItem := 1
    Local nErro := 1, aErrors := {}

    For nAttr := 1 to Len(aAttr)
        aErro := {}
        oAnnotation := Reflection.getDataAnnotation(self, aAttr[nAttr]:cAttributeName, "ModelValidationCollection")
        aItens := Reflection.getDataValue(self, aAttr[nAttr]:cAttributeName)

        If oAnnotation['Required'] .And. (aItens == Nil .Or. Empty(aItens))
            self:oError:AddError(aAttr[nAttr]:cAttributeName, "Campo " + aAttr[nAttr]:cAttributeName + " é obrigatório.")
            lRet := .F.
        Else
            For nItem := 1 To Len(aItens)
                If (!aItens[nItem]:ValidateModel())
                    lRet := .F.

                    aErrors := aItens[nItem]:oError:ErrorsArr()
                    For nErro := 1 To Len(aErrors)
                        self:oError:AddError(aAttr[nAttr]:cAttributeName + "_" + AllTrim(Str(nItem)) + "_" + aErrors[nErro, 1], aErrors[nErro, 2])
                    Next
                EndIf
            Next
        EndIf
    Next

Return(lRet)

Method ValidateObjectAttr() Class AbstractModel
    Local lRet := .T.
    Local aAttr := Reflection.getAttributesByAnnotation(self,"ModelValidationObject")
    Local xModel := Nil
    Local aErro := {}
    Local nAttr := 1, nErro := 1

    For nAttr := 1 to Len(aAttr)
        aErro := {}
        oAnnotation := Reflection.getDataAnnotation(self, aAttr[nAttr]:cAttributeName, "ModelValidationObject")
        
        xModel := Reflection.getDataValue(self, aAttr[nAttr]:cAttributeName)

        If oAnnotation['Required'] .And. (xModel == Nil .Or. Empty(xModel))
            self:oError:AddError(aAttr[nAttr]:cAttributeName, "Objeto " + aAttr[nAttr]:cAttributeName + " é obrigatório.")
            lRet := .F.
        ElseIf (xModel != Nil .And. !Empty(xModel) .And. !xModel:ValidateModel())

            aErrors := xModel:oError:ErrorsArr()
            For nErro := 1 To Len(aErrors)
                self:oError:AddError(aAttr[nAttr]:cAttributeName + "_" + aErrors[nErro, 1], aErrors[nErro, 2])
            Next

            lRet := .F.
        EndIf
    Next

Return(lRet)

Method ValidateModel() Class AbstractModel
    Local lRet := .T.
    Local aAttr := Reflection.getAttributesByAnnotation(self,"ModelValidation")
    Local nAttr := 1
    Local oAnnotation := Nil
    Local aAux := {}
    Local aOptions := Nil, nOption := 1

    For nAttr := 1 to Len(aAttr)
        aErro := {}
        oAnnotation := Reflection.getDataAnnotation(self, aAttr[nAttr]:cAttributeName, "ModelValidation")
        xValue := Reflection.getDataValue(self, aAttr[nAttr]:cAttributeName)

        If oAnnotation['MaxLength'] > 0 .And. xValue <> Nil .And. !Empty(xValue) .And. Len(xValue) > oAnnotation['MaxLength']
            If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "MAXLENGTH", oAnnotation))
                self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
            EndIf
            lRet := .F.
        EndIf

        If oAnnotation['MinLength'] > 0 .And. xValue <> Nil .And. !Empty(xValue) .And. Len(xValue) < oAnnotation['MinLength']
            If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "MINLENGTH", oAnnotation))
                self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
            EndIf
            lRet := .F.
        EndIf

        If oAnnotation['MaxValue'] > 0 .And. xValue <> Nil .And. xValue > oAnnotation['MaxValue']
            If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "MAXVALUE", oAnnotation))
                self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
            EndIf
            lRet := .F.
        EndIf

        If oAnnotation['MinValue'] > 0 .And. xValue <> Nil .And. xValue < oAnnotation['MinValue']
            If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "MINVALUE", oAnnotation))
                self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
            EndIf
            lRet := .F.
        EndIf

        If oAnnotation['Size'] > 0 .And. xValue <> Nil .And. !Empty(xValue) .And. Len(xValue) != oAnnotation['Size']
            If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "SIZE", oAnnotation))
                self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
            EndIf
            lRet := .F.
        EndIf

        If !Empty(oAnnotation['OptionList']) .And. xValue <> Nil .And. !Empty(xValue)

            aOptions := StrToKArr(oAnnotation['OptionList'], ";")
            For nOption := 1 To Len(aOptions)
                aAdd(aAux, {StrToKArr(aOptions[nOption], "=")[1], StrToKArr(aOptions[nOption], "=")[2]})
            Next

            nOption := aScan(aAux, { |aVet| aVet[1] == AllTrim(xValue) })

            If nOption == 0
                If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "OPTIONLIST", oAnnotation))
                    self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
                EndIf
                lRet := .F.
            EndIf
        EndIf

        If oAnnotation['Required'] .And. (xValue == Nil .Or. Empty(xValue))
            If !Empty(cMesage := self:GetErrorMessage(aAttr[nAttr]:cAttributeName, xValue, "REQUIRED", oAnnotation))
                self:oError:AddError(aAttr[nAttr]:cAttributeName, cMesage)
            EndIf
            lRet := .F.
        EndIf

        //aAttr[nAttr]:cAttributeType
    Next

    If !(self:ValidateCollection())
        lRet := .F.
    EndIf

    If !(self:ValidateObjectAttr())
        lRet := .F.
    EndIf

Return(lRet)

Method GetErrorMessage(cAttribute, xValue, cAnnotation, oAnnotation) Class AbstractModel
    Local cRet := ""
    If  Empty(cRet := self:ErrorsMessages(cAttribute, xValue, cAnnotation, oAnnotation))
        cRet := self:DefaultErrorsMessages(cAttribute, xValue, cAnnotation, oAnnotation)
    EndIf
Return(cRet)

Method DefaultErrorsMessages(cAttribute, xValue, cAnnotation, oAnnotation) Class AbstractModel
    Local oMessages := JSONObject():New()
    oMessages['REQUIRED']  := 'Campo é obrigatório!'
    oMessages['MINLENGTH'] := 'Campo deve ter mais que ' + AllTrim(Str(oAnnotation['MinLength'])) + " caracteres"
    oMessages['MAXLENGTH'] := 'Campo deve ser menor que ' + AllTrim(Str(oAnnotation['MaxLength'])) + " caracteres"
    oMessages['MINVALUE'] := 'Campo deve ser maior que ' + AllTrim(Str(oAnnotation['MinValue']))
    oMessages['MAXVALUE'] := 'Campo deve ser menor que ' + AllTrim(Str(oAnnotation['MaxValue']))
    oMessages['SIZE'] := 'Campo deve ter o tamanho igual a ' + AllTrim(Str(oAnnotation['Size'])) + " caracteres"
    oMessages['OPTIONLIST'] := 'Campo deve estar dentro da lista de opções: ' + AllTrim(oAnnotation['OptionList'])
Return(oMessages[cAnnotation])

Method ErrorsMessages(cAttribute, xValue, cAnnotation, oAnnotation) Class AbstractModel
Return('')

Method ToJsonStr(lOnlyMapper) Class AbstractModel
Return(FWJsonSerialize(self:ToJson(lOnlyMapper)))

Method ToJson(lOnlyMapper) Class AbstractModel
    Local jReturnMapper := JsonObject():New()
    Local jsonValues := Nil
    Local jProperties := Nil
    Local aNames := {}
    Local nName := 1
    Local cNewKey := "", cKey := ""
    Local cDataAux := ""

    Default lOnlyMapper := .T.

    jsonValues := self:InstanceValues(lOnlyMapper)
    jProperties := self:GetPropertyMapper()
    aNames := jProperties:GetNames()

    For nName := 1 To Len(aNames)
        cKey := Upper(aNames[nName])
        cNewKey := Upper(jProperties[aNames[nName]])

        If ValType(jsonValues[cKey]) == "D"
            cDataAux := DtoS(jsonValues[cKey])
            jReturnMapper[cNewKey] := SubStr(cDataAux, 1, 4) + "-" + SubStr(cDataAux, 5, 2) + "-" + SubStr(cDataAux, 7, 2)
        Else
            jReturnMapper[cNewKey] := jsonValues[cKey]
        EndIf

        // If (cKey == cNewKey)
        //     Loop
        // EndIf

        // jsonValues[cNewKey] := jsonValues[cKey]
        // jsonValues:DelName(cKey)
    Next
Return(IIF(lOnlyMapper, jReturnMapper, jsonValues))

/*
    Protected Methods
*/
Method GetPropertyMapper() Class AbstractModel
Return(JsonObject():New())

/*
    Private Methods
*/
Method InstanceValues(lOnlyMapper) Class AbstractModel
    Local aValues := ClassDataArr(self, .F.)
    Local nValue := 1
    Local oJsonReturn := JsonObject():new()
    Local nPosKey := 1
    Local nPosValue := 2

    For nValue := 1 To Len(aValues)
        oJsonReturn[aValues[nValue, nPosKey]] := self:ExtractJsonValue(aValues[nValue, nPosValue], lOnlyMapper)
    Next
Return oJsonReturn

Method ExtractJsonValue(xValue, lOnlyMapper) Class AbstractModel
    Local xRet := Nil
    Local nItem := 1

    If ValType(xValue) == "A"
        xRet := {}
        For nItem := 1 To Len(xValue)
            oAux := self:ExtractJsonValue(xValue[nItem], lOnlyMapper)
            If oAux <> Nil
                aAdd(xRet, oAux)
            EndIf
        Next
    ElseIf ValType(xValue) == "O"
        If U_AsHasMeth(xValue, "TOJSON")
            xRet := xValue:ToJson(lOnlyMapper)
        Else
            xRet := xValue
        EndIf
    Else
        xRet := xValue
    EndIf

Return(xRet)