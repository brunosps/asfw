
#INCLUDE "TOTVS.CH"

namespace asfw.query

User Function QueryAdapter()
    Local cSql := "SELECT table_name, column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name like 'SA%'"
    Local oQueryAdapter := QueryAdapter():New(cSql)

    oQueryAdapter:SetOrder({"table_name", "column_name"})
    oQueryAdapter:SetPage(1)
    oQueryAdapter:SetPageSize(10)

    oQueryAdapter:Execute()

    oResult := oQueryAdapter:GetJSONResponse()
Return(Nil)

Class QueryAdapter

    Public Data aResults As Array

    Private Data oPaginate As Object
    Private Data cQuery As Character
    Private Data aOrder As Array
    Private Data nPage As Integer
    Private Data nPageSize As Integer

    Public Method New(cQuery)
    Public Method Fetch(cQuery, nPage, nPageSize, cOrderBy, lPaginateMeta)
    Public Method Execute()
    Public Method GetJSONResponse(lPaginateMeta)
    Public Method GetTotalPages(cQryAlias)

    Public Method SetQuery(cQuery)
    Public Method SetOrder(aOrder)
    Public Method SetPage(nPage)
    Public Method SetPageSize(nPageSize)

    Public Method GetQuery()
    Public Method GetOrder()
    Public Method GetPage()
    Public Method GetPageSize()

    Public Method GetFields(cQryAlias)

    Public Method GetMetaFields(lDict)
    Public Method GetDefaultMetaField(lDict)
    Public Method GetMetaField(cField, lDict)

    Public Method LogRegData(cField)

EndClass

/*
    Public Methods
*/
Method New(cQuery) Class QueryAdapter
    self:cQuery := cQuery
    self:aResults := {}
    self:oPaginate := PaginatorFactory():GetPaginator()

    self:SetOrder({})
    self:SetPage(1)
    self:SetPageSize(10)
Return(self)

Method Fetch(cQuery, nPage, nPageSize, cOrderBy, lPaginateMeta) Class QueryAdapter
    Default nPage := 1
    Default nPageSize := 10
    Default cOrderBy := ''
    Default lPaginateMeta := .F.

    self:SetQuery(cQuery)
    self:SetOrder({cOrderBy})
    self:SetPage(nPage)
    self:SetPageSize(nPageSize)

    self:Execute()
Return(self:GetJSONResponse(lPaginateMeta))

Method SetQuery(cQuery) Class QueryAdapter
    self:cQuery := cQuery
Return(self)

Method SetOrder(aOrder) Class QueryAdapter
    self:aOrder := aOrder
Return(self)

Method SetPage(nPage) Class QueryAdapter
    If ValType(nPage) == "C"
        nPage := Val(nPage)
    EndIf
    self:nPage := nPage
Return(self)

Method SetPageSize(nPageSize) Class QueryAdapter
    self:nPageSize := nPageSize
Return (self)

Method GetQuery() Class QueryAdapter
Return(self:cQuery)

Method GetOrder() Class QueryAdapter
    Local cOrderBy := ""
    Local nOrder := 1

    For nOrder := 1 To Len(self:aOrder)
        If !Empty(self:aOrder[nOrder])
            cOrderBy += IIF(nOrder == 1, "", ", ")
            cOrderBy += self:aOrder[nOrder]
        EndIf
    Next
Return(cOrderBy)

Method GetPage() Class QueryAdapter
Return(self:nPage)

Method GetPageSize() Class QueryAdapter
Return (self:nPageSize)

Method GetTotalPages(cQryAlias) Class QueryAdapter
    Local cSql := ""
    Local nRet := 0

    Default cQryAlias := getNextAlias()

    cSql := " SELECT COUNT(*) TOTREG FROM (" + self:GetQuery() + ") AS TABLECOUNT"

    __ExecSql(cQryAlias, cSql, {}, .F.)

    nRet := (cQryAlias)->TOTREG / self:GetPageSize()

    (cQryAlias)->(DbCloseArea())

    nRet := INT(nRet) + IIF(nRet - INT(nRet) > 0, 1, 0)
Return(nRet)

Method GetFields(cQryAlias) Class QueryAdapter
    Local cSql := ""
    Local nField := 1
    Local aFields := {}

    Default cQryAlias := getNextAlias()

    cSql := self:oPaginate:GetPaginateSql(self:GetQuery(), "", 1, 1)

    __ExecSql(cQryAlias, cSql, {}, .F.)

    For nField := 1 To (cQryAlias)->(FCount())
        aAdd(aFields, (cQryAlias)->(FieldName(nField)))
    Next

    (cQryAlias)->(DbCloseArea())
Return(aFields)

Method GetMetaFields(lDict) class QueryAdapter
    Local aFields := self:GetFields()
    Local nField := 1
    Local aMeta := {}

    Default lDict := .F.

    For nField := 1 To Len(aFields)
        aAdd(aMeta, self:GetMetaField(aFields[nField], lDict))
    Next

Return(aMeta)

Method GetMetaField(cField, lDict) Class QueryAdapter
    Local lExist := asfw.sx.AsFwSX3():FieldExists(cField)

    If lExist
        If lDict
            oRet := asfw.sx.AsFwSX3():GetField(cField)
        Else
            oRet := asfw.sx.AsFwSX3():GetMeta(cField)
        EndIf
    Else
        oRet := self:GetDefaultMetaField(cField, lDict)
    EndIf
Return(oRet)

Method GetDefaultMetaField(cField, lDict) Class QueryAdapter
    Local oMeta := JsonObject():New()

    If lDict
        oMeta['X3_TITULO']  := cField
        oMeta['X3_CAMPO']   := cField
        oMeta['X3_PICTURE'] := "@!"
        oMeta['X3_TAMANHO'] := 50
        oMeta['X3_DECIMAL'] := 0
        oMeta['X3_VALID']   := ".T."
        oMeta['X3_USADO']   := ""
        oMeta['X3_TIPO']    := "C"
        oMeta['X3_F3']      := ""
        oMeta['X3_CONTEXT'] := "V"
        oMeta['X3_CBOX']    := NIL
        oMeta['X3_RELACAO'] := "V"
        oMeta['X3_WHEN']    := ".F."
    Else
        oMeta['property'] := cField
        oMeta['label'] := cField
        oMeta['type'] := 'string'
    EndIf
Return(oMeta)

Method LogRegData(cField) Class QueryAdapter
Return(self:oPaginate:LogRegData(cField))

Method Execute() Class QueryAdapter
    Local cQryAlias := getNextAlias()
    Local lRet := .F.
    Local nField := 1
    Local cSql := self:GetQuery()

    If self:GetPage() > 0 .And. self:GetPageSize() > 0
        cSql := self:oPaginate:GetPaginateSql(self:GetQuery(), self:GetOrder(), self:GetPage(), self:GetPageSize())
    ElseIf !Empty(self:GetOrder())
        cSql := cSql + " ORDER BY " + self:GetOrder()
    EndIf

    __ExecSql(cQryAlias, cSql, {}, .F.)

    lRet := (cQryAlias)->(!Eof())

    self:aResults := {}

    While (cQryAlias)->(!Eof())
        oRow := JsonObject():New()

        For nField := 1 To (cQryAlias)->(FCount())
            xValue := (cQryAlias)->(FieldGet(nField))

            If ValType(xValue) == "C"
                xValue := EnCodeUtf8(NoAcento(AllTrim(xValue)))

            EndIf

            oRow[(cQryAlias)->(FieldName(nField))] := xValue
        Next

        aAdd(self:aResults, oRow)

        (cQryAlias)->(DbSkip())
    EndDo

    (cQryAlias)->(DbCloseArea())

Return(lRet)

Method GetJSONResponse(lPaginateMeta) Class QueryAdapter
    Local oJson := JsonObject():New()

    Local nPage := self:GetPage()
    Local nPageSize := self:GetPageSize()
    Local nTotalPages := self:GetTotalPages()
    Local lHasNext := !Empty(self:aResults) .And. (nPage > 0 .And. nPageSize > 0) .And. !(nTotalPages == nPage)

    Default lPaginateMeta := .F.

    oJson["items"] := self:aResults
    oJson["hasNext"] := lHasNext

    If lPaginateMeta
        oJson["page"] := nPage
        oJson["pageSize"] := nPageSize
        oJson["totalPages"] := nTotalPages
    EndIf

Return(oJson)
